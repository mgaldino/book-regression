[["regressao-multipla.html", "Capítulo 12 - Regressao Multipla 12.1 Revisão de Matriz e Vetores 12.2 Modelo básico 12.3 Modelo com matrizes 12.4 Interpretação dos coeficientes 12.5 Regressão múltipla versus Múltiplas Regressões Separadas ou Viés de variável omitida 12.6 Matriz chapéu 12.7 Multicolinearidade 12.8 Distrações 12.9 Ridge Regression 12.10 LASSO 12.11 Erro padrão Robusto 12.12 Checagem do modelo", " Capítulo 12 - Regressao Multipla library(ggplot2) library(knitr) library(tidyverse) library(here) library(tidyr) É muito raro que tenhamos apenas um preditor em um contexto de regressão. Talvez em um experimento de laboratório, e mesmo assim é difícil não ter outros preditores. De modo que tudo que vimos até agora é um caso particular raríssimo e pouco útil per se. Para generalizar as derivações e resultados para múltiplos preditores é conveniente utilizar álgebra linear. Basicamente, isso significa usar vetores e matrizes para representar a regressão. As derivações das fórmulas ficam bem fáceis, bem como as propriedades do modelo de regressão. Como não estamos pressupondo que vocês conheçam o básico de Álgebra Linear, iremos pular as derivações e apresentar apenas as intuições, esperando que o que vocês aprenderam com um preditor seja suficiente para entender com múltiplos preditores. 12.1 Revisão de Matriz e Vetores Regressão múiltipla é mais facilmente compreendida com uso de matrizes. Portanto, vamos fazer uma rápida revisão da álgebra de vetores e matrizes. Se eu tenho um vetor \\(x = [ a_1, a_2, ..., a_n]\\), digo que este é um vetor linha com \\(n\\) elementos. É possível também ter um vetor coluna: \\[ \\begin{align} x &amp;= \\begin{bmatrix} a_{1} \\\\ a_{2} \\\\ \\vdots \\\\ a_{n} \\end{bmatrix} \\end{align} \\] Eu posso somar dois vetores linhas ou dois vetores colunas, se tiverem o mesmo número de elementos. Por exemplo, dois vetores colunas. \\[ \\begin{align} \\begin{bmatrix} a_{1} \\\\ \\vdots \\\\ a_{n} \\end{bmatrix} + \\begin{bmatrix} b_{1} \\\\ \\vdots \\\\ b_{n} \\end{bmatrix} &amp;= \\begin{bmatrix} a_1 + b_{1} \\\\ \\vdots \\\\ a_n + b_{n} \\end{bmatrix} \\end{align} \\] E posso fazer multiplicação de vetores (existem vários tipos, aqui me restringo ao produto interno ou produto ponto de vetores), desde que a gente multiplique um vetor linha por uma vetor coluna, mas não o contrário. \\[ \\begin{align} \\begin{bmatrix} a_{1}, a_2, \\cdots, a_{n} \\end{bmatrix} \\cdot \\begin{bmatrix} b_{1} \\\\ b_{2} \\\\ \\vdots \\\\ b_{n} \\end{bmatrix} &amp;= a_1 \\cdot b_{1} + a_2 \\cdot b_2 \\cdots + a_n \\cdot b_{n} \\end{align} \\] A razão é que a multiplicação de vetores (e matrizes em geral) é basicamente multiplicar linha com coluna. No caso de um vetor coluna multiplicado por um linha, isso não é possível. A adição e multiplicação de matrizes é basicamente a generalização da ágebra com vetores 12.2 Modelo básico O modelo básico de regressão linear múltipla pode ser especificado por: Existem p preditores, \\(X_1\\), \\(X_2\\), …, \\(X_p\\). Não precisamos fazer suposições sobre a distribuição dos preditores, e podem ser correlacionados ou não. Há uma única variável resposta, \\(Y\\). Se houvesse mais de uma, teríamos um modelo de regressão multivariada. \\(y_i = \\alpha + \\beta_1 \\cdot x_{1i} + \\beta_2 \\cdot x_{2i} + ... + \\beta_p \\cdot x_{pi} + e_i\\). Portanto, temos \\(p+1\\) parâmetros ou coeficientes de regressão a estimar. O erro \\(e_i\\) possui esperança condicional zero e variância condicional constante no modelo homocedástico, e não correlacionado entre observações. Se assumirmos normalidade do termo de erro, temos também: O erro \\(e_i\\) tem uma distribuição normal multivariada, com vetor de médias zero e matriz de variância e covariância cujos elementos fora da diagonal (covariância) são zero, e a diagonal principal é \\(\\sigma^2\\). 12.3 Modelo com matrizes Vejam que \\(\\alpha + \\beta_1 \\cdot x_{1i} + \\beta_2 \\cdot x_{2i} + ... + \\beta_p \\cdot x_{pi} + e_i\\) é uma soma de produtos, similar ao que eu tinha com vetores no exemplo acima. Exceto que \\(\\alpha\\) não multiplica nada. Então, vou considerar que tenhao um preditor cujo valor é uma constante e igual a \\(1\\), e os demais preditores, de forma que o lado direito da equação de regressão pode ser reescrito como soma e multiplicação de matrizes. Para o caso de um preditor \\(y_i = \\alpha + \\beta_ix_{1i} + e_i\\), a equação de regressão com matrizes, fica: \\[ \\begin{align} \\begin{bmatrix} y_1 \\\\ y_2 \\\\ \\vdots \\\\ y_{n} \\end{bmatrix} &amp;= \\begin{bmatrix} 1 &amp; x_{11} \\\\ 1 &amp; x_{12} \\\\ \\vdots \\\\ 1 &amp; x_{1n} \\end{bmatrix} \\begin{bmatrix} \\alpha \\\\ \\beta_1 \\\\ \\end{bmatrix} + \\begin{bmatrix} e_1 \\\\ e_2 \\\\ \\vdots \\\\ e_n \\end{bmatrix} \\end{align} \\] Se eu chamar o vetor coluna com os \\(y\\) de \\(Y\\), a matriz com a constante \\(1\\) e \\(x_{1i}\\) de \\(X\\), o vetor de coeficientes de \\(B\\) e o vetor de erros \\(\\epsilon\\), tenho então: \\[ Y = XB + \\epsilon \\] Veja que a generalização para \\(p\\) preditores gera a mesma equação: \\[ \\begin{align} \\begin{bmatrix} y_1 \\\\ y_2 \\\\ \\vdots \\\\ y_{n} \\end{bmatrix} &amp;= \\begin{bmatrix} 1 &amp; x_{11} &amp; x_{21} \\cdots &amp; x_{p1}\\\\ 1 &amp; x_{12} &amp; x_{22} \\cdots &amp; x_{p2}\\\\ \\vdots \\\\ 1 &amp; x_{1n} &amp; x_{2n} \\cdots &amp; x_{pn} \\end{bmatrix} \\begin{bmatrix} \\alpha \\\\ \\beta_1 \\\\ \\beta_2 \\\\ \\vdots \\\\ \\beta_p \\end{bmatrix} + \\begin{bmatrix} e_1 \\\\ e_2 \\\\ \\vdots \\\\ e_n \\end{bmatrix} \\end{align} \\] \\[ Y = XB + \\epsilon \\] A única diferença é o tamanho da matriz \\(X\\) e \\(B\\), em que \\(X\\) é uma matriz \\(n \\times (p+1)\\), isto é, com \\(n\\) linhas e \\(p+1\\) colunas, e \\(B\\) é uma matriz de tamanho \\((p+1) \\times 1\\) e \\(Y\\) e \\(\\epsilon\\) são \\(n \\times 1\\). E as suposições podem ser escritas como \\(\\mathbb{E}[\\epsilon|X] = 0\\) e \\(\\mathbb{Var}[\\epsilon|X] = \\sigma^2I\\), em que \\(I\\) é a matriz identidade, isto é, uma matriz cuja diagonal principal é \\(1\\) e o resto é \\(zero\\). 12.3.1 Estimador de MQO É possível mostrar que o estimador de mínimos quadrados ordinários é dados por: \\[ B = X&#39;X^{-1} \\cdot X&#39;Y \\] Veja que \\(X&#39;Y\\) é um produto (com soma) entre \\(X\\) e \\(Y\\), ou seja, é como se fosse a covariância entre \\(X\\) e \\(Y\\), e \\(X&#39;X\\) se assemelha à variância de \\(X\\). E está elevado a \\(-1\\) porque não existe divisão em matriz, de forma que preciso multiplicar pela inversa. 12.4 Interpretação dos coeficientes Nosso coeficiente \\(\\alpha\\) é novamente o valor esperado do \\(Y\\) na origem, isto é: \\[ \\alpha = \\mathbb{E}[Y|X_1=0, X_2=0, \\cdots, X_p=0]$ \\] Em um modelo sem interações, o efeito de cada variávei \\(X_i\\) é a contribuição separada para a resposta esperada (média). Portanto, \\(B_i\\) mede a contribuição de como \\(\\mathbb{E}[Y]\\) muda à medida que \\(X_i\\) (e apenas \\(X_i\\)) muda, para qualquer valor de \\(X_i\\) (se a equação for linear nas variáveis) e para qualquer valor das demais variáveis (pressuposto de aditividade, sem interação, dos preditores). Vamos retomar nosso modelo de previsão eleitoral e rodar no R, agora adicionando múltipals variáveis. library(data.table) # lista o nome do arquivo em csv # unzip(here(&quot;dados&quot;, &quot;votacao_secao_2018_BR.zip&quot;), list = TRUE) #read data1.csv into data frame presid_18 &lt;- fread(here(&quot;dados&quot;,&quot;votacao_secao_2018_BR.csv&quot;), encoding = &quot;Latin-1&quot;) # Supondo que seu dataframe seja chamado df df_resultados &lt;- presid_18 %&gt;% dplyr::filter(!NR_VOTAVEL %in% c(95,96)) %&gt;% group_by(NR_ZONA, CD_MUNICIPIO, SG_UF, NR_VOTAVEL, NR_TURNO) %&gt;% summarise(total_votos = sum(QT_VOTOS)) %&gt;% pivot_wider(names_from = NR_TURNO, values_from = total_votos, values_fill = 0) %&gt;% clean_names() %&gt;% group_by(nr_zona, cd_municipio, sg_uf) %&gt;% mutate(total_validos_1t = sum(x1), total_validos_2t = sum(x2)) %&gt;% dplyr::filter(nr_votavel %in% c(13,17)) %&gt;% group_by(nr_votavel) %&gt;% mutate(percentual_1t = x1 /total_validos_1t, percentual_2t = x2 / total_validos_2t) %&gt;% ungroup() %&gt;% dplyr::select(-c(x1, x2, total_validos_1t, total_validos_2t)) %&gt;% pivot_wider(names_from = nr_votavel, values_from = c(percentual_1t, percentual_2t)) # remove # rm(presid_18) df_resultados %&gt;% ggplot(aes(x=percentual_1t_17, y=percentual_2t_17)) + geom_point() + facet_wrap(~sg_uf) + geom_smooth(method=&quot;lm&quot;, se=F, linewidth = .5) # modelo de regressão reg1 &lt;- lm(percentual_2t_17 ~ percentual_1t_17 + percentual_1t_13 + sg_uf, data = df_resultados) summary(reg1) ## ## Call: ## lm(formula = percentual_2t_17 ~ percentual_1t_17 + percentual_1t_13 + ## sg_uf, data = df_resultados) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.190977 -0.010934 -0.001161 0.009747 0.272558 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.355531 0.005763 61.689 &lt;2e-16 *** ## percentual_1t_17 0.777791 0.005276 147.419 &lt;2e-16 *** ## percentual_1t_13 -0.277355 0.004577 -60.603 &lt;2e-16 *** ## sg_ufAL -0.101170 0.004644 -21.787 &lt;2e-16 *** ## sg_ufAM -0.084715 0.004815 -17.596 &lt;2e-16 *** ## sg_ufAP -0.087085 0.006414 -13.577 &lt;2e-16 *** ## sg_ufBA -0.086392 0.004355 -19.835 &lt;2e-16 *** ## sg_ufCE -0.150819 0.004654 -32.406 &lt;2e-16 *** ## sg_ufDF -0.077372 0.006221 -12.437 &lt;2e-16 *** ## sg_ufES -0.079796 0.004701 -16.974 &lt;2e-16 *** ## sg_ufGO -0.085402 0.004352 -19.624 &lt;2e-16 *** ## sg_ufMA -0.105331 0.004464 -23.596 &lt;2e-16 *** ## sg_ufMG -0.065445 0.004235 -15.454 &lt;2e-16 *** ## sg_ufMS -0.061922 0.004685 -13.219 &lt;2e-16 *** ## sg_ufMT -0.088621 0.004493 -19.722 &lt;2e-16 *** ## sg_ufPA -0.071259 0.004489 -15.876 &lt;2e-16 *** ## sg_ufPB -0.119179 0.004447 -26.801 &lt;2e-16 *** ## sg_ufPE -0.113396 0.004454 -25.458 &lt;2e-16 *** ## sg_ufPI -0.091415 0.004480 -20.404 &lt;2e-16 *** ## sg_ufPR -0.060601 0.004284 -14.145 &lt;2e-16 *** ## sg_ufRJ -0.096635 0.004433 -21.797 &lt;2e-16 *** ## sg_ufRN -0.112249 0.004522 -24.826 &lt;2e-16 *** ## sg_ufRO -0.059576 0.004958 -12.017 &lt;2e-16 *** ## sg_ufRR -0.085327 0.006511 -13.104 &lt;2e-16 *** ## sg_ufRS -0.061179 0.004262 -14.353 &lt;2e-16 *** ## sg_ufSC -0.061522 0.004327 -14.220 &lt;2e-16 *** ## sg_ufSE -0.094247 0.004814 -19.578 &lt;2e-16 *** ## sg_ufSP -0.039378 0.004250 -9.265 &lt;2e-16 *** ## sg_ufTO -0.095958 0.004526 -21.202 &lt;2e-16 *** ## sg_ufZZ -0.081547 0.004558 -17.892 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.02 on 6209 degrees of freedom ## (1 observation deleted due to missingness) ## Multiple R-squared: 0.9918, Adjusted R-squared: 0.9918 ## F-statistic: 2.588e+04 on 29 and 6209 DF, p-value: &lt; 2.2e-16 # AC é a categoria de referência A interpretação das variáveis, portanto, é a seguinte: O intercepto mede o percentual médio no segundo turno quando todas as variáveis são zero. Ou seja, Haddad e Bolsonaro tiveram 0 pontos percentuais (não existe caso assim!) e a UF é o Acre, que é a categoria de referência. A variável “percentual_1t_17” mede o efeito preditivo no voto do 2o turno do Bolsonaro de aumento de um ponto percentual no voto do primeiro turno, que é de 0,77 pontos percentuais. A variável “percentual_1t_13” mede similarmente o efeito preditivo de aumento de um ponto percentual do voto do Haddad no primeiro turno sobre o voto do Bolsonaro no 2o turno. Como esperado, a relação é negativa, isto é, quanto melhor o Haddad foi no primeiro turno, pior o Bolsonaro no segundo turno naquela seção eleitoral. E o efeito de cada UF é o efeito de estar naquela UF, em comparação com a categoria de referência, ACRE. 12.5 Regressão múltipla versus Múltiplas Regressões Separadas ou Viés de variável omitida Rodar uma regressão com duas variáveis (digamos), não é o mesmo que rodar duas regressões separadas, uma com cada variável. A razão é que os preditores em geral terão alguma correlação entre si. Para ver isso, suponha que o verdadeiro modelo é \\(Y = \\alpha + \\beta_1 \\cdot X_1 + \\beta_2 \\cdot X_2 + \\epsilon\\). O que aconteceria se rodássemos uma regressão com um preditor apenas (\\(X_1\\))? Vamos usar as seguintes propriedades da covariância nessa derivação. Sejam \\(X\\) e \\(Y\\) duas v.a., Seja \\(A\\) uma constante. Então, \\(\\mathbb{Cov}[X,Y + A] = \\mathbb{Cov}[X,Y] + \\mathbb{Cov}[X,A]\\). Como \\(A\\) é constante, \\(\\mathbb{Cov}[X,A] = 0\\) e, portanto, \\(\\mathbb{Cov}[X,Y + A] = \\mathbb{Cov}[X,Y]\\). \\(\\mathbb{Cov}[X,Y \\cdot A] = A \\cdot \\mathbb{Cov}[X,Y]\\). Em um modelo com um único preditor, teremos: \\(Y = \\alpha + \\beta_1^* \\cdot X_1 + \\epsilon\\) Designei o beta da equação com um preditor por \\(\\beta_1^*\\), para diferenciar do \\(\\beta_1\\) da verdadeira equação, com dois preditores. Nós sabemos que \\(\\beta_1^* = \\frac{\\mathbb{Cov}[X_1,Y]}{\\mathbb{Var}[X_1]}\\) Vamos substituir o \\(Y\\) do modelo verdadeiro na equação do \\(\\beta_1^*\\). \\[\\begin{align*} \\beta_1^* = \\frac{\\mathbb{Cov}[X_1,\\alpha + \\beta_1 \\cdot X_1 + \\beta_2 \\cdot X_2 + e]}{\\mathbb{Var}[X_1]} = \\\\ \\frac{\\mathbb{Cov}[X_1,\\beta_1 \\cdot X_1] + \\mathbb{Cov}[X_1, \\beta_2 \\cdot X_2] + \\mathbb{Cov}[X_1, e]}{\\mathbb{Var}[X_1]} = \\\\ \\frac{\\beta_1 \\cdot \\mathbb{Cov}[X_1, X_1] + \\beta_2 \\cdot \\mathbb{Cov}[X_1, X_2] + \\mathbb{ Cov}[X_1,e]}{\\mathbb{Var}[X_1]} = \\\\ \\frac{\\beta_1 \\cdot \\mathbb{Var}[X_1] + \\beta_2 \\cdot \\mathbb{Cov}[X_1, X_2] + 0}{\\mathbb{Var}[X_1]} = \\\\ \\frac{\\beta_1 \\cdot \\mathbb{Var}[X_1]}{\\mathbb{Var}[X_1]} + \\frac{\\beta_2 \\cdot \\mathbb{Cov}[X_1, X_2] + 0}{\\mathbb{Var}[X_1]} = \\\\ \\beta_1 + \\frac{\\beta_2 \\cdot \\mathbb{Cov}[X_1, X_2] + 0}{\\mathbb{Var}[X_1]} = \\\\ \\beta_1^* = \\beta_1 + \\frac{\\beta_2 \\cdot \\mathbb{Cov}[X_1, X_2]}{\\mathbb{Var}[X_1]} \\end{align*}\\] Vemos que a inclinação \\(\\beta_1^*\\) inclui a contribuição direta de \\(X_1\\) via \\(\\beta_1\\) mais a contribuição indireta da correlação com \\(X_2\\), via \\(\\beta_2\\). Portanto, se eu rodar uma regressão com um preditor quando o verdadeiro modelo tem dois preditores, o coeficiente de \\(\\beta_1^*\\) será uma média entre \\(\\beta_1\\) e \\(\\beta_2\\). Por outro lado, se eu rodar a regressão com o modelo correto com os dois preditores, consigo que \\(\\beta_1^*\\) reflita só a contribuição de \\(\\beta_1\\). Talvez você esteja se perguntando a essa altura: quem garante que o verdadeiro modelo possua só dois preditores? Isso é o que chamamos de viés de variável omitida. Se omitirmos da regressão uma variável \\(X_k\\) correlacionada com \\(X_j\\), \\(j \\neq k\\), então o coeficiente \\(\\beta_j\\) reflitirá também o efeito de \\(\\beta_k\\). Aqui não estamos falando de causalidade, apenas da contribuição para a previsão da nossa variável resposta. Naturalmente, antes da moderna abordagem de inferência causal por resultados potenciais de Rubin (ou redes Bayesianas em modelos estruturais de Pearl), as pessoas pensavam que, controlando para o máximo de variáveis possível, com sorte seria possível eliminar (ou reduzir a um mínimo) o viés de variável omitida e, portanto, estar seguro que \\(\\beta_1\\) estimaria o efeito causal. Nós hoje sabemos que o modo mais seguro de pensar causalidade é usando uma das duas abordagens (as iniciadas por Rubin ou Pearl), e verificando (por exemplo com resultados potenciais) que a suposição de independência condicional (CIA, de Conditional Independence Assumption) é plausível para poder interpretar \\(\\beta_1\\) causalmente. Sem um modelo causal, a abordagem de introdução de regressores para controlar o viés de variável omitida não nos permite fazer inferência causal, exceto em casos muitos simples ou quando implicitamente temos garantida a validade da CIA (como em um experimento bem conduzido e com compliance), como é o caso das ciências naturais como física e química. 12.6 Matriz chapéu Uma forma interessante de visualizar as previsões do modelo é que podemos escrever \\(\\hat{Y} = XB\\). Substituindo a fórmula do \\(B\\), temos que: \\[ \\hat{Y} = X X&#39;X^{-1}X&#39;Y = \\\\ (X X&#39;X^{-1}X&#39;)Y = \\\\ HY \\] Essa equação mostra que as previsões são dadas pelas respostas observadas, ponderadas pela matriz chapéu (hat), \\(H\\). 12.7 Multicolinearidade Até o momento não falamos sobre em que condições a matrix inversa \\(X&#39;X^{-1}\\) existe. Nós sabemos que nem todas as matrizes podem ser invertíveis. Matrizes com determinante zero são não-invertíveis. A intuição é como pensar que não é possível dividir um escalar por zero. O determinante é zero quando as colunas não são linearmente independentes. Ou seja, quando uma coluna (ou mais) é uma combinação linear de um ou mais colunas. No nosso caso, quando a correlação for \\(1\\) (ou \\(-1\\)). Nesses casos, não é possível estimar os coeficientes da regressão e acontece quando temos multicolinearidade. Softwares modernos, como R, irão “dropar” uma (ouas mais) variável(eis) se isso ocorrer, automaticamente, para evitar que a matriz não seja invertível. Assim, a menos que acorrelação seja perfeita, multicolinearidade não costuma ser um problema. 12.8 Distrações Algumas distrações 12.9 Ridge Regression 12.10 LASSO 12.11 Erro padrão Robusto Na presernça de heterocedasticidade ou correlação nos erros (como autocorrelação temporal ou autocorrelação espacial), precisamos corrigir o cálculo do erro padrão. Ao aplicar alguma correção no cálculo do erro padrão, chamamos de erro padrão robusto, para distringuir o erro padrão usual que o R solta. Para utilizar erro padrão robusto, vamos usar principalmente o pacote “sandwich”. Há vários tipos de erros padrão robustos, “HC0”, “HC1”, “HC2”, “HC3”, entre outros. Vamos falar rapidamente sobre cada uma deles. Antes disso, vamos comparar para nossa regressão como o erro padrão muda para cada um desses tipos. library(sandwich) ## Warning: package &#39;sandwich&#39; was built under R version 4.3.2 library(stargazer) ## ## Please cite as: ## Hlavac, Marek (2022). stargazer: Well-Formatted Regression and Summary Statistics Tables. ## R package version 5.2.3. https://CRAN.R-project.org/package=stargazer library(lmtest) ## Carregando pacotes exigidos: zoo ## ## Attaching package: &#39;zoo&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## as.Date, as.Date.numeric m2 &lt;- coeftest(reg1, vcovHC(reg1, type = &quot;HC0&quot;)) m3 &lt;- coeftest(reg1, vcovHC(reg1, type = &quot;HC1&quot;)) m4 &lt;- coeftest(reg1, vcovHC(reg1, type = &quot;HC2&quot;)) m5 &lt;- coeftest(reg1, vcovHC(reg1, type = &quot;HC3&quot;)) stargazer(reg1, m2, m3, m4, m5, type = &quot;html&quot;) Dependent variable: percentual_2t_17 OLS coefficient test (1) (2) (3) (4) (5) percentual_1t_17 0.778*** 0.778*** 0.778*** 0.778*** 0.778*** (0.005) (0.010) (0.010) (0.010) (0.010) percentual_1t_13 -0.277*** -0.277*** -0.277*** -0.277*** -0.277*** (0.005) (0.008) (0.008) (0.008) (0.008) sg_ufAL -0.101*** -0.101*** -0.101*** -0.101*** -0.101*** (0.005) (0.007) (0.007) (0.007) (0.007) sg_ufAM -0.085*** -0.085*** -0.085*** -0.085*** -0.085*** (0.005) (0.007) (0.007) (0.007) (0.007) sg_ufAP -0.087*** -0.087*** -0.087*** -0.087*** -0.087*** (0.006) (0.008) (0.008) (0.008) (0.008) sg_ufBA -0.086*** -0.086*** -0.086*** -0.086*** -0.086*** (0.004) (0.007) (0.007) (0.007) (0.007) sg_ufCE -0.151*** -0.151*** -0.151*** -0.151*** -0.151*** (0.005) (0.008) (0.008) (0.008) (0.008) sg_ufDF -0.077*** -0.077*** -0.077*** -0.077*** -0.077*** (0.006) (0.007) (0.007) (0.007) (0.008) sg_ufES -0.080*** -0.080*** -0.080*** -0.080*** -0.080*** (0.005) (0.007) (0.007) (0.007) (0.007) sg_ufGO -0.085*** -0.085*** -0.085*** -0.085*** -0.085*** (0.004) (0.007) (0.007) (0.007) (0.007) sg_ufMA -0.105*** -0.105*** -0.105*** -0.105*** -0.105*** (0.004) (0.007) (0.007) (0.007) (0.007) sg_ufMG -0.065*** -0.065*** -0.065*** -0.065*** -0.065*** (0.004) (0.007) (0.007) (0.007) (0.007) sg_ufMS -0.062*** -0.062*** -0.062*** -0.062*** -0.062*** (0.005) (0.007) (0.007) (0.007) (0.007) sg_ufMT -0.089*** -0.089*** -0.089*** -0.089*** -0.089*** (0.004) (0.007) (0.007) (0.007) (0.007) sg_ufPA -0.071*** -0.071*** -0.071*** -0.071*** -0.071*** (0.004) (0.007) (0.007) (0.007) (0.007) sg_ufPB -0.119*** -0.119*** -0.119*** -0.119*** -0.119*** (0.004) (0.007) (0.007) (0.007) (0.007) sg_ufPE -0.113*** -0.113*** -0.113*** -0.113*** -0.113*** (0.004) (0.007) (0.007) (0.007) (0.007) sg_ufPI -0.091*** -0.091*** -0.091*** -0.091*** -0.091*** (0.004) (0.007) (0.007) (0.007) (0.007) sg_ufPR -0.061*** -0.061*** -0.061*** -0.061*** -0.061*** (0.004) (0.007) (0.007) (0.007) (0.007) sg_ufRJ -0.097*** -0.097*** -0.097*** -0.097*** -0.097*** (0.004) (0.007) (0.007) (0.007) (0.007) sg_ufRN -0.112*** -0.112*** -0.112*** -0.112*** -0.112*** (0.005) (0.007) (0.007) (0.007) (0.008) sg_ufRO -0.060*** -0.060*** -0.060*** -0.060*** -0.060*** (0.005) (0.007) (0.007) (0.007) (0.007) sg_ufRR -0.085*** -0.085*** -0.085*** -0.085*** -0.085*** (0.007) (0.007) (0.007) (0.008) (0.008) sg_ufRS -0.061*** -0.061*** -0.061*** -0.061*** -0.061*** (0.004) (0.007) (0.007) (0.007) (0.007) sg_ufSC -0.062*** -0.062*** -0.062*** -0.062*** -0.062*** (0.004) (0.007) (0.007) (0.007) (0.007) sg_ufSE -0.094*** -0.094*** -0.094*** -0.094*** -0.094*** (0.005) (0.007) (0.007) (0.007) (0.008) sg_ufSP -0.039*** -0.039*** -0.039*** -0.039*** -0.039*** (0.004) (0.007) (0.007) (0.007) (0.007) sg_ufTO -0.096*** -0.096*** -0.096*** -0.096*** -0.096*** (0.005) (0.007) (0.007) (0.007) (0.007) sg_ufZZ -0.082*** -0.082*** -0.082*** -0.082*** -0.082*** (0.005) (0.009) (0.009) (0.009) (0.009) Constant 0.356*** 0.356*** 0.356*** 0.356*** 0.356*** (0.006) (0.010) (0.010) (0.011) (0.011) Observations 6,239 R2 0.992 Adjusted R2 0.992 Residual Std. Error 0.020 (df = 6209) F Statistic 25,882.990*** (df = 29; 6209) Note: p&lt;0.1; p&lt;0.05; p&lt;0.01 # conf int library(knitr) coefci(reg1, vcov. = vcovHC(reg1, type = &#39;HC1&#39;)) %&gt;% kable() 2.5 % 97.5 % (Intercept) 0.3350033 0.3760590 percentual_1t_17 0.7583797 0.7972015 percentual_1t_13 -0.2936573 -0.2610519 sg_ufAL -0.1151015 -0.0872385 sg_ufAM -0.0986993 -0.0707314 sg_ufAP -0.1026175 -0.0715529 sg_ufBA -0.1003028 -0.0724807 sg_ufCE -0.1662120 -0.1354263 sg_ufDF -0.0915291 -0.0632155 sg_ufES -0.0937037 -0.0658873 sg_ufGO -0.0991474 -0.0716567 sg_ufMA -0.1192041 -0.0914571 sg_ufMG -0.0792045 -0.0516851 sg_ufMS -0.0757868 -0.0480581 sg_ufMT -0.1024452 -0.0747959 sg_ufPA -0.0851832 -0.0573345 sg_ufPB -0.1332370 -0.1051214 sg_ufPE -0.1273447 -0.0994480 sg_ufPI -0.1054809 -0.0773482 sg_ufPR -0.0743198 -0.0468815 sg_ufRJ -0.1104185 -0.0828524 sg_ufRN -0.1266669 -0.0978309 sg_ufRO -0.0735371 -0.0456145 sg_ufRR -0.0999596 -0.0706939 sg_ufRS -0.0748960 -0.0474614 sg_ufSC -0.0752199 -0.0478245 sg_ufSE -0.1085156 -0.0799776 sg_ufSP -0.0531533 -0.0256020 sg_ufTO -0.1098511 -0.0820642 sg_ufZZ -0.0987445 -0.0643491 12.11.1 Entendendo o erro padrão robusto Vamos fazer uma simulação no R para entender os vários tipos de erro padrão robusto. Vamos criar um modelo com heterocedasticidade. x &lt;- rnorm(10) e &lt;- rnorm(10, 0, x^2) # o DP do erro é igual a .5*x^2 a &lt;- 2 b &lt;- -2 y &lt;- a + b*x + e df &lt;- data.frame(y=y, x=x) df %&gt;% ggplot(aes(y=y, x=x)) + geom_point() + geom_smooth(method=&quot;lm&quot;) ## `geom_smooth()` using formula = &#39;y ~ x&#39; m_sim &lt;- lm(y ~ x, data=df) # plots de checagem do modelo library(easystats) ## Warning: package &#39;easystats&#39; was built under R version 4.3.2 ## # Attaching packages: easystats 0.7.0 (red = needs update) ## ✔ bayestestR 0.13.1 ✔ correlation 0.8.4 ## ✔ datawizard 0.9.0 ✔ effectsize 0.8.6 ## ✖ insight 0.19.6 ✔ modelbased 0.8.6 ## ✔ performance 0.10.8 ✔ parameters 0.21.3 ## ✔ report 0.5.7 ✔ see 0.8.1 ## ## Restart the R-Session and update packages with `easystats::easystats_update()`. check_model(m_sim) f2 &lt;- coeftest(m_sim, vcovHC(m_sim, type = &quot;HC0&quot;)) f3 &lt;- coeftest(m_sim, vcovHC(m_sim, type = &quot;HC1&quot;)) f4 &lt;- coeftest(m_sim, vcovHC(m_sim, type = &quot;HC2&quot;)) f5 &lt;- coeftest(m_sim, vcovHC(m_sim, type = &quot;HC3&quot;)) stargazer(m_sim, f2, f3, f4, f5, type = &quot;html&quot;) Dependent variable: y OLS coefficient test (1) (2) (3) (4) (5) x -3.440*** -3.440*** -3.440*** -3.440*** -3.440*** (0.567) (0.605) (0.676) (0.723) (0.867) Constant 1.496* 1.496** 1.496** 1.496** 1.496* (0.737) (0.520) (0.581) (0.592) (0.677) Observations 10 R2 0.821 Adjusted R2 0.799 Residual Std. Error 2.274 (df = 8) F Statistic 36.755*** (df = 1; 8) Note: p&lt;0.1; p&lt;0.05; p&lt;0.01 # dados de 2022 #read into data frame presid_22 &lt;- fread(here(&quot;dados&quot;,&quot;votacao_secao_2022_BR.csv&quot;), encoding = &quot;Latin-1&quot;) df_resultados_22_aux &lt;- presid_22 %&gt;% dplyr::filter(!NR_VOTAVEL %in% c(95,96)) %&gt;% group_by(NR_ZONA, CD_MUNICIPIO, SG_UF, NR_VOTAVEL, NR_TURNO) %&gt;% summarise(total_votos = sum(QT_VOTOS)) %&gt;% pivot_wider(names_from = NR_TURNO, values_from = total_votos, values_fill = 0) %&gt;% clean_names() %&gt;% group_by(nr_zona, cd_municipio, sg_uf) %&gt;% mutate(total_validos_1t = sum(x1), total_validos_2t = sum(x2)) %&gt;% dplyr::filter(nr_votavel %in% c(13,22)) %&gt;% group_by(nr_votavel) %&gt;% mutate(percentual_1t = x1/total_validos_1t, percentual_2t = x2/total_validos_2t) %&gt;% ungroup() df_resultados_22 &lt;- df_resultados_22_aux%&gt;% dplyr::select(-c(x1, x2, total_validos_1t, total_validos_2t)) %&gt;% pivot_wider(names_from = nr_votavel, values_from = c(percentual_1t, percentual_2t)) %&gt;% rename(percentual_1t_17 = percentual_1t_22, percentual_2t_17 = percentual_2t_22) Agora que importamos os dados de 22, podemos fazer nossa previsão, usando os resultados do primeiro turno. df_resultados_22_aux1 &lt;- df_resultados_22_aux %&gt;% ungroup() %&gt;% group_by(nr_zona, cd_municipio, sg_uf) %&gt;% summarise(total_validos_1t = sum(total_validos_1t)) #Previsão previsoes &lt;- predict(reg1, newdata = df_resultados_22, interval = &quot;prediction&quot;, level = .95) %&gt;% as.data.frame() df_resultados_22_final &lt;- df_resultados_22 %&gt;% ungroup() %&gt;% mutate(prev_perc = previsoes$fit, prev_perc_lower = previsoes$lwr, prev_perc_upper = previsoes$upr, validos_prev = df_resultados_22_aux1$total_validos_1t*prev_perc, validos_prev_lower = df_resultados_22_aux1$total_validos_1t*prev_perc_lower, validos_prev_upper = df_resultados_22_aux1$total_validos_1t*prev_perc_upper) tot_valido &lt;- sum(df_resultados_22_aux1$total_validos_1t) df_resultados_22_final %&gt;% summarise(perc_previsto = sum(validos_prev,na.rm = T)/tot_valido, perc_previsto_lower = sum(validos_prev_lower,na.rm = T)/tot_valido, perc_previsto_upper = sum(validos_prev_upper,na.rm = T)/tot_valido) ## # A tibble: 1 × 3 ## perc_previsto perc_previsto_lower perc_previsto_upper ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.481 0.442 0.521 12.12 Checagem do modelo "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
